{"name":"Dodgy","tagline":"Optionally abortable, resolvable, or rejectable promises","body":"Dodgy [![build status](https://secure.travis-ci.org/WebReflection/dodgy.svg)](http://travis-ci.org/WebReflection/dodgy)\r\n=====\r\n\r\nThe idea behind this module has been explained in [my good old blog](http://webreflection.blogspot.co.uk/2015/09/on-cancelable-promises.html),\r\nand was [born after the following gist](https://gist.github.com/WebReflection/796d1f04b1173fbcfe5a#file-lie-js) as improved and well tested 30 LOC \"_life saver_\".\r\n\r\n### How to opt in for .abort([optionalValue])\r\nIn order to be make a promise cancelable we need to invoke the third argument which is a callback expecting to know what to do in case of abort.\r\n```js\r\nvar Dodgy = require('dodgy').Promise;\r\n\r\nvar p = new Dodgy(function (res, rej, onAbort) {\r\n  var t = setTimeout(res, 1000, 'OK');\r\n  onAbort(function (butWhy) {\r\n    clearTimeout(t);\r\n    return butWhy || 'because';\r\n  });\r\n});\r\n\r\np.then(\r\n  console.log.bind(console),\r\n  console.warn.bind(console)  // <- .abort()\r\n).catch(\r\n  console.error.bind(console)\r\n);\r\n\r\n// at any time later on\r\np.abort('not needed anynmore');\r\n\r\n```\r\n\r\n### How to opt in as externally resolvable\r\nCanceling a Promise is one thing, resolving it externally is a whole new \"_dodger_\" level but we can explicitly opt in if that's needed.\r\n```js\r\nvar p = new Dodgy(\r\n  function (res, rej, optInAbort) {\r\n    // we still need to opt in for abortability\r\n    // simply invoke the third argument\r\n    // passing a \"no-op\" function, if needed\r\n    optInAbort(Object); // Object would do\r\n  },\r\n  true  // <- go dodger !!!\r\n);\r\n\r\n// our p now will have 3 methods:\r\np.resolve;\r\np.reject;\r\np.abort;\r\n```\r\nAt this point we can fully control our Promise, proudly riding the edges of nonsense-land!\r\n\r\n### Chainability\r\nWe can `p.then().catch()` as much as we like, all control methods will be propagated down the road.\r\n\r\n### Compatibility\r\nEvery browser and JavaScript engine, but the Promise polyfill is not included.\r\nTry [es6-promise](https://github.com/jakearchibald/es6-promise) if you want, it worked for my [tests on IE8 too](http://webreflection.github.io/dodgy/test/).\r\n\r\n### Which file?\r\n`npm install dodgy` for modules, [build folder](build/) for all other versions.\r\n\r\n### Which license?\r\nThe MIT style License","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}